INFO  16:06:01,708 - Compiling source file: C:\Users\Sergej\Desktop\pp2k23\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  16:06:01,767 - #2 program
INFO  16:06:01,767 - #41 MJProgram
INFO  16:06:01,767 - #17 namespace
INFO  16:06:01,768 - #41 sizes
INFO  16:06:01,768 - #3 {
INFO  16:06:01,768 - #18 const
INFO  16:06:01,769 - #41 int
INFO  16:06:01,769 - #41 tableSize
INFO  16:06:01,770 - #22 =
INFO  16:06:01,770 - #42 10
INFO  16:06:01,771 - #5 ;
INFO  16:06:01,772 - #3 {
INFO  16:06:01,774 - #4 }
INFO  16:06:01,776 - #4 }
INFO  16:06:01,776 - #18 const
INFO  16:06:01,777 - #41 int
INFO  16:06:01,777 - #41 z
INFO  16:06:01,777 - #22 =
INFO  16:06:01,777 - #42 4
INFO  16:06:01,777 - #10 ,
INFO  16:06:01,778 - #41 u
INFO  16:06:01,778 - #22 =
INFO  16:06:01,778 - #42 10
INFO  16:06:01,778 - #5 ;
INFO  16:06:01,778 - #41 int
INFO  16:06:01,778 - #41 x
INFO  16:06:01,779 - #10 ,
INFO  16:06:01,779 - #41 y
INFO  16:06:01,779 - #8 [
INFO  16:06:01,779 - #9 ]
INFO  16:06:01,779 - #10 ,
INFO  16:06:01,780 - #41 q
INFO  16:06:01,780 - #5 ;
INFO  16:06:01,780 - #3 {
INFO  16:06:01,782 - #41 double
INFO  16:06:01,782 - #41 k
INFO  16:06:01,783 - #6 (
INFO  16:06:01,784 - #41 int
INFO  16:06:01,784 - #41 arg1
INFO  16:06:01,784 - #10 ,
INFO  16:06:01,784 - #41 int
INFO  16:06:01,785 - #41 arg2
INFO  16:06:01,785 - #8 [
INFO  16:06:01,785 - #9 ]
INFO  16:06:01,785 - #7 )
INFO  16:06:01,785 - #41 double
INFO  16:06:01,786 - #41 c
INFO  16:06:01,787 - #5 ;
INFO  16:06:01,787 - #3 {
INFO  16:06:01,788 - #41 c
INFO  16:06:01,789 - #22 =
INFO  16:06:01,792 - #42 1
INFO  16:06:01,793 - #5 ;
INFO  16:06:01,794 - #12 return
INFO  16:06:01,794 - #41 c
INFO  16:06:01,795 - #13 +
INFO  16:06:01,795 - #42 2
INFO  16:06:01,796 - #5 ;
INFO  16:06:01,797 - #4 }
INFO  16:06:01,797 - #41 int
INFO  16:06:01,797 - #41 main
INFO  16:06:01,798 - #6 (
INFO  16:06:01,798 - #7 )
INFO  16:06:01,799 - #3 {
INFO  16:06:01,799 - #41 y
INFO  16:06:01,799 - #22 =
INFO  16:06:01,799 - #42 2
INFO  16:06:01,799 - #5 ;
INFO  16:06:01,799 - #39 if
INFO  16:06:01,799 - #6 (
INFO  16:06:01,800 - #41 x
INFO  16:06:01,800 - #27 <=
INFO  16:06:01,800 - #42 0
INFO  16:06:01,801 - #7 )
INFO  16:06:01,802 - #28 break
INFO  16:06:01,802 - #5 ;
INFO  16:06:01,802 - #39 if
INFO  16:06:01,803 - #6 (
INFO  16:06:01,803 - #42 0
INFO  16:06:01,803 - #27 <=
INFO  16:06:01,803 - #41 x
INFO  16:06:01,803 - #33 &&
INFO  16:06:01,804 - #41 sizes
INFO  16:06:01,804 - #20 ::
INFO  16:06:01,804 - #41 tableSize
INFO  16:06:01,804 - #24 >
INFO  16:06:01,804 - #41 x
INFO  16:06:01,805 - #7 )
INFO  16:06:01,805 - #3 {
INFO  16:06:01,805 - #11 print
INFO  16:06:01,805 - #6 (
INFO  16:06:01,805 - #41 x
INFO  16:06:01,805 - #7 )
INFO  16:06:01,805 - #5 ;
INFO  16:06:01,805 - #4 }
INFO  16:06:01,806 - #40 else
INFO  16:06:01,806 - #39 if
INFO  16:06:01,806 - #6 (
INFO  16:06:01,806 - #34 -
INFO  16:06:01,806 - #41 sizes
INFO  16:06:01,807 - #20 ::
INFO  16:06:01,807 - #41 tableSize
INFO  16:06:01,808 - #26 <
INFO  16:06:01,808 - #41 x
INFO  16:06:01,809 - #33 &&
INFO  16:06:01,809 - #41 x
INFO  16:06:01,810 - #26 <
INFO  16:06:01,810 - #42 0
INFO  16:06:01,810 - #7 )
INFO  16:06:01,810 - #3 {
INFO  16:06:01,810 - #41 read
INFO  16:06:01,811 - #6 (
INFO  16:06:01,811 - #41 x
INFO  16:06:01,811 - #7 )
INFO  16:06:01,812 - #5 ;
INFO  16:06:01,812 - #4 }
INFO  16:06:01,812 - #12 return
INFO  16:06:01,813 - #42 0
INFO  16:06:01,813 - #5 ;
INFO  16:06:01,813 - #4 }
INFO  16:06:01,813 - #4 }
